## 프로젝트 리팩토링 보고서: DOD/ECS 전환 현황

현재 원래 OOP였던 GNEngine 프로젝트를 데이터 중심 설계(Data-Oriented Design, DOD) 및 엔티티-컴포넌트-시스템(Entity-Component-System, ECS) 아키텍처로 전환하는 작업을 진행하고 있습니다.

### 1. 현재까지 구현한 목록

*   **시스템(System) 도입:**
    *   `RenderSystem`: `TransformComponent`와 `RenderComponent`를 가진 엔티티를 렌더링합니다.
    *   `AnimationSystem`: `AnimationComponent`를 가진 엔티티의 애니메이션 프레임을 업데이트합니다.
    *   `MovementSystem`: `TransformComponent`, `VelocityComponent`, `AccelerationComponent`를 가진 엔티티의 위치를 업데이트하며, 가속/감속 운동을 처리합니다.
    *   `PlayerAnimationControlSystem`: `PlayerAnimationControllerComponent`를 가진 엔티티의 애니메이션 전환 로직을 처리합니다.
    *   `SoundSystem`: `SoundComponent`와 `TransformComponent`를 가진 엔티티의 사운드 위치를 업데이트하고 사운드를 재생합니다.
*   **컴포넌트(Component) 순수 데이터화 시작:**
    *   `Component` 기본 클래스에서 `update` 메서드를 제거하여 순수 데이터 인터페이스로 변경했습니다.
    *   모든 컴포넌트(`TransformComponent`, `VelocityComponent`, `AccelerationComponent`, `RenderComponent`, `AnimationComponent`, `SoundComponent`, `TextComponent`, `PlayerAnimationControllerComponent`, `PlayerMovementComponent`)의 생성자에서 `Object& owner` 인자를 제거하고, `Component(owner)` 호출을 제거했습니다.
    *   `RenderComponent`에서 `RenderManager` 참조 및 `TransformComponent`, `AnimationComponent` 포인터를 제거하고, `Texture*`와 `bool hasAnimation`만 가지는 순수 데이터 컴포넌트로 변경했습니다.
    *   `PlayerAnimationControllerComponent`에서 `owner_` 멤버 변수 및 관련 로직을 제거하고, `playWalkAnimation()`, `playJumpAnimation()`, `isJumpAnimationActive()`, `setCurrentAnimation()` 메서드를 `PlayerAnimationControlSystem`으로 이동했습니다.
    *   `PlayerMovementComponent`에서 `owner_->getComponent` 호출을 제거했습니다.
*   **엔티티(Entity) 및 `EntityManager` 도입 (중간 단계):**
    *   `EntityId` 타입을 정의했습니다.
    *   `EntityManager` 클래스를 생성하여 `EntityId`를 생성하고 관리하는 기능을 추가했습니다.
    *   `EntityManager`는 현재 `Object` 인스턴스를 통해 컴포넌트를 간접적으로 관리하는 중간 단계로 구현되어 있습니다.
*   **`Object` 클래스 역할 축소:**
    *   `Object` 클래스에서 `update` 및 `render` 가상 함수를 제거했습니다.
    *   `TestObject`가 `Object` 상속을 제거하고, `EntityManager`를 통해 컴포넌트를 추가하는 헬퍼 클래스 역할을 하도록 변경했습니다.
*   **빌드 시스템 업데이트:**
    *   새로운 컴포넌트 및 시스템 소스 파일들을 CMake 빌드 시스템에 포함시켰습니다.

### 2. 현재 상황

*   **빌드 상태:** 프로젝트는 현재 성공적으로 빌드됩니다.
*   **런타임 오류:** `RenderSystem.cpp` 8번째 줄에서 발생하던 `segmentation fault`는 `Application::init()`에서 `renderSystem_` 초기화 누락 문제 및 `ObjectManager::getObjects()`의 `static` 변수 문제 해결 후 정상 작동하고 있습니다.
*   **리팩토링 과도기:**
    *   **`Object` 클래스의 잔존:** `Object` 클래스는 여전히 존재하며, `EntityManager`가 `Object*`를 통해 컴포넌트를 간접적으로 관리하고 있습니다. 이는 순수한 DOD/ECS 아키텍처가 아닙니다.
    *   **`TextObject`의 불완전한 전환:** `TextObject`는 `Object` 상속을 제거했지만, `TextObject.cpp`에서 `TransformComponent` 및 `TextComponent`를 추가하는 방식이 아직 완전히 ECS 방식에 맞지 않습니다.
    *   **시스템의 `Object*` 인자:** 현재 모든 시스템의 `update` 메서드는 `const std::vector<Object*>& objects`를 인자로 받고 있습니다. 이는 `EntityManager`를 통해 `EntityId`를 직접 쿼리하는 방식으로 변경되어야 합니다.

### 3. 앞으로 해야 할 일

가장 중요한 목표는 `EntityManager`가 컴포넌트를 직접 관리하도록 완전히 전환하고, `Object` 및 `ObjectManager` 클래스를 제거하는 것입니다.

1.  **`EntityManager`의 컴포넌트 직접 관리 완성:**
    *   `EntityManager`의 `addComponent`, `getComponent`, `hasComponent`, `removeComponent` 템플릿 메서드들이 `Object*`를 거치지 않고 `ComponentArray<T>`를 직접 사용하도록 완전히 재구현합니다.
    *   `EntityManager`에서 `registerObject`, `unregisterObject`, `getObject` 메서드를 제거합니다.
2.  **`Object` 클래스 완전 제거:**
    *   `EntityManager`가 컴포넌트를 직접 관리하게 되면, `Object` 클래스는 더 이상 필요 없게 됩니다. `Object` 클래스 및 관련 파일들을 제거합니다.
3.  **`ObjectManager` 클래스 제거:**
    *   `EntityManager`가 모든 엔티티와 컴포넌트를 직접 관리하게 되면, `ObjectManager`는 더 이상 필요 없게 됩니다. `ObjectManager` 클래스 및 관련 파일들을 제거합니다.
4.  **모든 시스템 (`RenderSystem`, `MovementSystem`, `PlayerAnimationControlSystem`, `SoundSystem`) 업데이트:**
    *   현재 `std::vector<Object*>`를 인자로 받고 있는데, 이를 `EntityManager`를 통해 `EntityId`와 필요한 컴포넌트들을 직접 쿼리하는 방식으로 변경합니다.
5.  **`TextObject` 리팩토링 완료:**
    *   `TextObject`의 생성자 및 내부 로직을 `EntityManager`를 통해 컴포넌트를 직접 추가하는 방식으로 완전히 전환합니다.
    *   `TextObject`에서 `transform_` 및 `textComponent_` 멤버 변수를 제거합니다.
    *   `TextObject`의 `setText`, `setColor`, `setPosition` 메서드를 `EntityManager`를 통해 컴포넌트 데이터를 직접 조작하도록 변경합니다.
6.  **`EntityManager`의 컴포넌트 쿼리 기능 강화:**
    *   시스템이 특정 컴포넌트 조합을 가진 엔티티만 효율적으로 쿼리할 수 있는 메커니즘(예: `getEntitiesWith<ComponentA, ComponentB>()`)을 `EntityManager`에 추가해야 합니다.
7.  **엔티티 ID 재활용 시스템 구현:**
    *   `EntityManager::createEntity()`에서 `nextEntityId_`를 단순히 증가시키는 대신, 파괴된 엔티티의 ID를 재활용하는 시스템을 구현하여 메모리 효율성을 높입니다.
8.  **`InputSystem` 구현:**
    *   `InputManager`로부터 이벤트를 받아 `PlayerMovementComponent` (또는 새로운 `InputStateComponent`)를 가진 엔티티의 데이터를 업데이트하는 시스템을 구현합니다.
9.  **`Scene` 및 `SceneManager` 업데이트:**
    *   `Scene`은 더 이상 `Object*`를 직접 관리하지 않고, `EntityManager`를 통해 `EntityId`를 생성하고 관리합니다.
    *   `SceneManager`는 `EntityManager`를 소유하거나 참조하여 씬 전환 시 엔티티들을 활성화/비활성화합니다.
