// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DEFINITIONS_GNENGINE_DATA_H_
#define FLATBUFFERS_GENERATED_DEFINITIONS_GNENGINE_DATA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace GNEngine {
namespace data {

struct Setting;
struct SettingBuilder;

struct Log;
struct LogBuilder;

struct Data;
struct DataBuilder;

struct Setting FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SettingBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_VALUE = 6
  };
  const ::flatbuffers::String *key() const {
    return GetPointer<const ::flatbuffers::String *>(VT_KEY);
  }
  bool KeyCompareLessThan(const Setting * const o) const {
    return *key() < *o->key();
  }
  int KeyCompareWithValue(const char *_key) const {
    return strcmp(key()->c_str(), _key);
  }
  template<typename StringType>
  int KeyCompareWithValue(const StringType& _key) const {
    if (key()->c_str() < _key) return -1;
    if (_key < key()->c_str()) return 1;
    return 0;
  }
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct SettingBuilder {
  typedef Setting Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key(::flatbuffers::Offset<::flatbuffers::String> key) {
    fbb_.AddOffset(Setting::VT_KEY, key);
  }
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(Setting::VT_VALUE, value);
  }
  explicit SettingBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Setting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Setting>(end);
    fbb_.Required(o, Setting::VT_KEY);
    return o;
  }
};

inline ::flatbuffers::Offset<Setting> CreateSetting(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> key = 0,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0) {
  SettingBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_key(key);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Setting> CreateSettingDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    const char *value = nullptr) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return GNEngine::data::CreateSetting(
      _fbb,
      key__,
      value__);
}

struct Log FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LogBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4,
    VT_MESSAGE = 6
  };
  int64_t timestamp() const {
    return GetField<int64_t>(VT_TIMESTAMP, 0);
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_TIMESTAMP, 8) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct LogBuilder {
  typedef Log Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_timestamp(int64_t timestamp) {
    fbb_.AddElement<int64_t>(Log::VT_TIMESTAMP, timestamp, 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(Log::VT_MESSAGE, message);
  }
  explicit LogBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Log> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Log>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Log> CreateLog(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t timestamp = 0,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  LogBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_message(message);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Log> CreateLogDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t timestamp = 0,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return GNEngine::data::CreateLog(
      _fbb,
      timestamp,
      message__);
}

struct Data FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SETTINGS = 4,
    VT_LOGS = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<GNEngine::data::Setting>> *settings() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<GNEngine::data::Setting>> *>(VT_SETTINGS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<GNEngine::data::Log>> *logs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<GNEngine::data::Log>> *>(VT_LOGS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SETTINGS) &&
           verifier.VerifyVector(settings()) &&
           verifier.VerifyVectorOfTables(settings()) &&
           VerifyOffset(verifier, VT_LOGS) &&
           verifier.VerifyVector(logs()) &&
           verifier.VerifyVectorOfTables(logs()) &&
           verifier.EndTable();
  }
};

struct DataBuilder {
  typedef Data Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_settings(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<GNEngine::data::Setting>>> settings) {
    fbb_.AddOffset(Data::VT_SETTINGS, settings);
  }
  void add_logs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<GNEngine::data::Log>>> logs) {
    fbb_.AddOffset(Data::VT_LOGS, logs);
  }
  explicit DataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Data> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Data>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Data> CreateData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<GNEngine::data::Setting>>> settings = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<GNEngine::data::Log>>> logs = 0) {
  DataBuilder builder_(_fbb);
  builder_.add_logs(logs);
  builder_.add_settings(settings);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Data> CreateDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<GNEngine::data::Setting>> *settings = nullptr,
    const std::vector<::flatbuffers::Offset<GNEngine::data::Log>> *logs = nullptr) {
  auto settings__ = settings ? _fbb.CreateVectorOfSortedTables<GNEngine::data::Setting>(settings) : 0;
  auto logs__ = logs ? _fbb.CreateVector<::flatbuffers::Offset<GNEngine::data::Log>>(*logs) : 0;
  return GNEngine::data::CreateData(
      _fbb,
      settings__,
      logs__);
}

inline const GNEngine::data::Data *GetData(const void *buf) {
  return ::flatbuffers::GetRoot<GNEngine::data::Data>(buf);
}

inline const GNEngine::data::Data *GetSizePrefixedData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GNEngine::data::Data>(buf);
}

inline bool VerifyDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GNEngine::data::Data>(nullptr);
}

inline bool VerifySizePrefixedDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GNEngine::data::Data>(nullptr);
}

inline void FinishDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GNEngine::data::Data> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GNEngine::data::Data> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace data
}  // namespace GNEngine

#endif  // FLATBUFFERS_GENERATED_DEFINITIONS_GNENGINE_DATA_H_


